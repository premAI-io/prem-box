services:

  traefik:
    container_name: traefik
    image: traefik:v2.4
    networks:
      - prem-gateway
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--accesslog=true"
      - "--ping"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/letsencrypt:/letsencrypt
    depends_on:
      - dnsd
    restart: always

  dnsd:
    container_name: dnsd
    image: ${PREMG_DNSD_IMAGE}
    networks:
      - prem-gateway
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dnsd.rule=HeadersRegexp(`X-Host-Override`,`dnsd`) && PathPrefix(`/`)"
    depends_on:
      - dnsd-db-pg
      - authd
    environment:
      PREM_GATEWAY_DNS_DB_HOST: dnsd-db-pg
    ports:
      - "8082:8080"
    restart: always

  dnsd-db-pg:
    container_name: dnsd-db-pg
    image: postgres:14.7
    networks:
      - prem-gateway
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    restart: always
  authd:
    container_name: authd
    image: ${PREMG_AUTHD_IMAGE}
    networks:
      - prem-gateway
    ports:
      - "8081:8080"
    restart: always

  controllerd:
    container_name: controllerd
    image: ${PREMG_CONTROLLERD_IMAGE}
    networks:
      - prem-gateway
    ports:
      - "8083:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    environment:
      LETSENCRYPT_PROD: ${LETSENCRYPT_PROD}
      SERVICES: ${SERVICES}

networks:
  prem-gateway:
    external: true